#!/usr/bin/env python
# dependencies python-xmpp mpg123 fortune

from do_stuff import Sound
from jabberbot import JabberBot, botcmd
from datetime import datetime
import subprocess
import re
from config import *

class MUCJabberBot(JabberBot):


    def __init__(self, *args, **kwargs):
        ''' Initialize variables. '''

        # answer only direct messages or not?
        self.only_direct = kwargs.get('only_direct', False)
        try:
            del kwargs['only_direct']
        except KeyError:
            pass

        # initialize jabberbot
        super(MUCJabberBot, self).__init__(*args, **kwargs)

        # create a regex to check if a message is a direct message
        user, domain = str(self.jid).split('@')
        self.direct_message_re = re.compile('^%s(@%s)?[^\w]? ' \
                % (user, domain))

    def callback_message(self, conn, mess):
        ''' Changes the behaviour of the JabberBot in order to allow
        it to answer direct messages. This is used often when it is
        connected in MUCs (multiple users chatroom). '''

        message = mess.getBody()
        if not message:
            return

        if self.direct_message_re.match(message):
            mess.setBody(' '.join(message.split(' ', 1)[1:]))
            return super(MUCJabberBot, self).callback_message(conn, mess)
        elif not self.only_direct:
            return super(MUCJabberBot, self).callback_message(conn, mess)


class PiBot(MUCJabberBot):

    @botcmd
    def fail(self, mess, args):
        sound = Sound()
        sound.play_from_dir("fail")

    @botcmd
    def win(self, mess, args):
        sound = Sound()
        sound.play_from_dir("win")
    
    @botcmd
    def fortune(self, mess, args):
        text = subprocess.check_output(["fortune","-s"])
        self.send_simple_reply(mess, text.replace('\n',' '))

    @botcmd
    def moep(self, mess, args):
        self.send_simple_reply(mess, "MOEP!")
        sound = Sound()
        sound.play_from_dir("moep")
	
	@botcmd
	def muhaha(self, mess, args):
		self.send_simple_reply(mess, "MUHAHA!")
		sound = Sound()
        sound.play_misc("muhaha.wave")

	@botcmd
	def reanimate(self, mess, args):
		sound = Sound()
        sound.play_misc("def.mp3")
        
    @botcmd
    def project(self, mess, args):
        if "SUCCESS" in args:
            sound = Sound()
            sound.play_from_dir("win")
        elif "FAIL" in args:
            sound = Sound()
            sound.play_from_dir("fail")

if __name__ == '__main__':

    mucbot = PiBot(username, password, only_direct=False)
    mucbot.muc_join_room(chatroom, nickname)
    mucbot.serve_forever()
